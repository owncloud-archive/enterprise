workspace:
  base: /drone
  path: src/github.com/owncloud-docker/enterprise

branches:
  - master

clone:
  git:
    image: plugins/git:1
    pull: true

pipeline:
  tarball:
    image: plugins/download:1
    pull: true
    secrets: [ download_username, download_password ]
    source: https://download.owncloud.com/internal/10.0.10/owncloud-enterprise-complete-10.0.10.tar.bz2
    sha256: 02838a2a880e70fd4eaf4a8d53f3a228b061fed88f69d2bdb9e683b9225de311

  wait:
    image: owncloud/ubuntu:latest
    pull: true
    commands:
      - wait-for-it -t 600 docker:2375

  build:
    image: toolhippie/docker:latest
    pull: true
    environment:
      - DOCKER_HOST=tcp://docker:2375
    commands:
      - docker build -t registry.owncloud.com/owncloud/enterprise:${DRONE_COMMIT_SHA}-${DRONE_BUILD_NUMBER} .

  server:
    image: toolhippie/docker:latest
    pull: true
    detach: true
    secrets: [ owncloud_license_key ]
    environment:
      - DOCKER_HOST=tcp://docker:2375
    commands:
      - docker run -p 8000:8080 -e OWNCLOUD_LICENSE_KEY registry.owncloud.com/owncloud/enterprise:${DRONE_COMMIT_SHA}-${DRONE_BUILD_NUMBER}

  test:
    image: owncloud/ubuntu:latest
    pull: true
    commands:
      - wait-for-it -t 600 docker:8000
      - curl -sSf http://docker:8000/status.php

  prepublish:
    image: toolhippie/docker:latest
    pull: true
    secrets: [ docker_username, docker_password ]
    environment:
      - DOCKER_HOST=tcp://docker:2375
    commands:
      - echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin registry.owncloud.com
      - docker push registry.owncloud.com/owncloud/enterprise:${DRONE_COMMIT_SHA}-${DRONE_BUILD_NUMBER}
    when:
      event: [ push, pull_request ]

  clair:
    image: toolhippie/klar:latest
    pull: true
    secrets:
      - source: docker_username
        target: docker_user
      - source: docker_password
        target: docker_password
    environment:
      - CLAIR_ADDR=clair.owncloud.com
      - CLAIR_OUTPUT=High
    commands:
      - klar registry.owncloud.com/owncloud/enterprise:${DRONE_COMMIT_SHA}-${DRONE_BUILD_NUMBER}
    when:
      event: [ push, pull_request ]

  publish:
    image: toolhippie/docker:latest
    pull: true
    secrets: [ docker_username, docker_password ]
    environment:
      - DOCKER_HOST=tcp://docker:2375
    commands:
      - echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin registry.owncloud.com
      - docker tag registry.owncloud.com/owncloud/enterprise:${DRONE_COMMIT_SHA}-${DRONE_BUILD_NUMBER} registry.owncloud.com/owncloud/enterprise:latest
      - docker push registry.owncloud.com/owncloud/enterprise:latest
      - docker tag registry.owncloud.com/owncloud/enterprise:${DRONE_COMMIT_SHA}-${DRONE_BUILD_NUMBER} registry.owncloud.com/owncloud/enterprise:latest-$(date '+%Y%m%d')
      - docker push registry.owncloud.com/owncloud/enterprise:latest-$(date '+%Y%m%d')
      - docker tag registry.owncloud.com/owncloud/enterprise:${DRONE_COMMIT_SHA}-${DRONE_BUILD_NUMBER} registry.owncloud.com/owncloud/enterprise:10.0.10
      - docker push registry.owncloud.com/owncloud/enterprise:10.0.10
      - docker tag registry.owncloud.com/owncloud/enterprise:${DRONE_COMMIT_SHA}-${DRONE_BUILD_NUMBER} registry.owncloud.com/owncloud/enterprise:10.0.10-$(date '+%Y%m%d')
      - docker push registry.owncloud.com/owncloud/enterprise:10.0.10-$(date '+%Y%m%d')
      - docker tag registry.owncloud.com/owncloud/enterprise:${DRONE_COMMIT_SHA}-${DRONE_BUILD_NUMBER} registry.owncloud.com/owncloud/enterprise:10.0
      - docker push registry.owncloud.com/owncloud/enterprise:10.0
    when:
      event: [ push ]

  # FIXME: currently it removes the built image as well.
  # cleanup:
  #   image: toolhippie/reg:latest
  #   pull: true
  #   secrets: [ docker_username, docker_password ]
  #   commands:
  #     - reg rm --username $DOCKER_USERNAME --password $DOCKER_PASSWORD registry.owncloud.com/owncloud/enterprise:${DRONE_COMMIT_SHA}-${DRONE_BUILD_NUMBER}
  #   when:
  #     event: [ push, pull_request ]
  #     status: [ success, failure ]

  microbadger:
    image: plugins/webhook:1
    pull: true
    secrets: [ webhook_urls ]
    when:
      local: false
      event: [ push ]

  slack:
    image: plugins/slack:1
    pull: true
    secrets: [ slack_webhook ]
    channel: docker
    when:
      local: false
      event: [ push ]
      status: [ changed, failure ]

services:
  docker:
    image: docker:18.04-dind
